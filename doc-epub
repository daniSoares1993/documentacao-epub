PWA -> site desenvolvido para parecer exatamento como um aplicatvo.
Service Worker : scripts javascript que controlam o armazenamento de cache permitindo um desempenho mais alto, pois permite que os
assets e grande parte do front, persista armazenado no dispositivo, possibilitando executar esses "apps" completamente offline.
O PWA é praticamente um app, possibilitando o envio de push notification, icone de acesso na tela do smartphone, splash screen,
Importante: processos rodando em background, acesso a componentes nativos, como camera, geolicalização...
Service Workers => são eles que dao permissao para acesso ao cache, navegação online e push notifications;
Service Workers nada mais é que um script que o navegador executa em segundo plano, separado da pagina web e que possui um ciclo de vida próprio, possibilitando execucao de recursos que não precisam da pagina ou da interação com o usuario para acontecer. 
Portanto  é necessario seguir a risca as recomendações do google;


Basicamente o PWA é um site responsivo turbinado;
Se o PWA é basicamente um app, quais as vantagens de se desenvolver um PWA?
- beneficio para empresa e desenolvedores, como um PWA é dependente apenas de CSS e JS, gerar e distribuir uma nova atualização e distribuir para todas as plataformas fica muito mais simples;
- reutilização de um mesmo código para plataformas diferentes;
- independência das apps stores;

Principais caracteristicas:
- progressivo, funciona para qualquer usuario independente do navegador escolhido, é criado com aprimoramento progressivo como principio fundamental;
- responsivo, adaptabilidade a qualquer tipo de dispositivo;
- aprimorado com o Service Worker para trabalhar tanto online quanto offline; 
- caracteristicas de aplicativos nativos;
- sempre atualizado gracas ao processo de atualização do service Worker;
- fornecido atraves do https, paraevitar invasões e evitar que o conteudo  seja adulterado;
- pode ser descobrivel gracas aos manifests W3C e ao escopo de registros do service worker que permite que os mecanismos de pesquisa o encontrem;

Principais Frameworks:
- ionic
- polimer
- Angular


Package Document => Cada publicação EPUB contém pelo menos uma versão de seu conteúdo, cada uma das quais é representada por um documento de pacote . O Documento do Pacote especifica todos os recursos necessários para renderizar essa representação do conteúdo. O Documento do Pacote também define uma ordem de leitura para consumo linear e associa metadados e informações de navegação para a Rendição.
O Documento de Pacote também inclui um collectionelemento [ Pacotes32 ], que permite o agrupamento de Recursos de Publicação logicamente relacionados . Esse elemento existe para permitir o desenvolvimento de recursos especializados de identificação, processamento e renderização de conteúdo, como a capacidade de definir o conteúdo de visualização incorporado ou montar um índice ou dicionário a partir de seus documentos de conteúdo XHTML constituintes.


biblioteca JS:
AngularEpubViewer => pesquisar sobre essa lib => A AngularEpubViewer é uma biblioteca para Angular que fornece um componente visual para exibir conteúdo EPUB. O componente permite aos usuários navegar por conteúdo EPUB, visualizar capítulos, marcar páginas, pesquisar conteúdo e controlar a exibição de conteúdo. Além disso, a biblioteca oferece diversos recursos de personalização que permitem que os desenvolvedores criem sua própria experiência de leitura.

Epub.js v0.3 => https://www.npmjs.com/package/epubjs 
epub.js biblioteca javascript. (https://github.com/futurepress/epub.js/)=> https://github.com/futurepress/epub.js
github documentation => https://github.com/janpio/ionic-epubjs
https://github.com/viking2917/ionic-epub-reader -> melhor documentado

http://viladosilicio.com.br/criando-um-leitor-de-epub-com-javascript/

A biblioteca Angular mais apropriada para EPUB 3 é a Biblioteca Angular UI-Router, que oferece um conjunto de recursos projetados para ajudar a criar e gerenciar aplicativos EPUB 3 de forma rápida e eficiente. Além disso, ela fornece recursos como configuração de rota, controles de navegação, anotações de conteúdo e estrutura de aplicativo para ajudar a criar uma experiência de usuário integrada.

No ionic:

Para usar a biblioteca epub.js precisamos instalar a biblioteca usando npm:

npm install epub.js --save

Depois de instalada, importar a biblioteca epub.js assim:

import * as EPub from 'epub.js';

Agora você pode usar a biblioteca epub.js em seu aplicativo. Por exemplo, para carregar um ePub:

let epub = EPub('/path/to/epub.epub');

Agora você pode usar as funções da biblioteca epub.js para ler o conteúdo do livro. Por exemplo, para ler o título do livro:

let title = epub.metadata.title;

Para obter mais informações sobre como usar o epub.js, consulte a documentação do projeto na seguinte URL:

https://github.com/futurepress/epub.js


JSZIP:
como eu consigo abrir o arqivo jszip em meu projeto ionic

O JSZip é uma biblioteca JavaScript que permite trabalhar com arquivos compactados no formato ZIP. Ela é suportada nos principais navegadores, mas também pode ser usada com frameworks JavaScript como o Ionic.

Para usar o JSZip no seu projeto Ionic, primeiro você precisa instalar a biblioteca. Você pode fazer isso usando o NPM ou o yarn. Por exemplo, para instalar o JSZip usando o NPM, você pode executar o seguinte comando no seu terminal:

npm install jszip

Uma vez instalado, você pode usar o JSZip no seu projeto adicionando a seguinte linha no seu arquivo de configuração do Ionic:

<!-- <script src="node_modules/jszip/dist/jszip.js"></script> --> 

Agora você pode usar a biblioteca JSZip para manipular arquivos ZIP em seu projeto Ionic. Por exemplo, para ler um arquivo ZIP, você pode usar o seguinte código:

var JSZip = require('jszip'); // Crie um novo objeto JSZip var zip = new JSZip(); // Carregue o arquivo ZIP zip.loadAsync(file).then(function (contents) { // Seu código aqui }).catch(function (e) { // Seu código de erro aqui });